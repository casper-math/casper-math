import casper from './../../src/index'

it.each([
    ['53 + 8', '61'],
    ['173 + 6', '179'],
    ['800 + 35', '835'],
    ['12 - 9', '3'],
    ['83 - 7', '76'],
    ['500 - 17', '483'],
    ['64 + 89 + 36', '189'],
    ['17 + 58 + 183', '258'],
    ['600 + 800', '1400'],
    ['5 + 7', '12'],
    ['500 + 700', '1200'],
    ['5000 + 70', '5070'],
    ['23 - 7', '16'],
    ['2300 - 700', '1600'],
    ['2300 - 70', '2230'],
    ['2300 + 700', '3000'],
    ['7500 - 3200', '4300'],
    ['8000 - 111', '7889'],
    ['7 * 4', '28'],
    ['3 * 8', '24'],
    ['5 * 3', '15'],
    ['8 * 4', '32'],
    ['80 * 40', '3200'],
    ['800 * 40', '32000'],
    ['9 * 4', '36'],
    ['700 * 30', '21000'],
    ['400 * 9000', '3600000'],
    ['56 / 8', '7'],
    ['28 / 7', '4'],
    ['24 / 3', '8'],
    ['640 / 8', '80'],
    ['1800 / 600', '3'],
    ['3600 / 60', '60'],
    ['1800 / 90', '20'],
    ['54000 / 60', '900'],
    ['6900 / 3', '2300'],
    ['-8 + -3', '-11'],
    ['-8 + 3', '-5'],
    ['8 + -3', '5'],
    ['-8 - 3', '-11'],
    ['8 - 3', '5'],
    ['-3 - 8', '-11'],
    ['3 + -8', '-5'],
    ['-3 + -8', '-11'],
    ['-3 + 8', '5'],
    ['5 + -1', '4'],
    ['-5 + -6', '-11'],
    ['0 + -8', '-8'],
    ['13 + -21', '-8'],
    ['19 + -19', '0'],
    ['-21 + -21', '-42'],
    ['14 - 23', '-9'],
    ['-43 + -57', '-100'],
    ['-141 + 97', '-44'],
    ['-56 + -56', '-112'],
    ['91 + -117', '-26'],
    ['-83 + -112', '-195'],
    ['-5 + -4 + 13', '4'],
    ['11 + -11 + -12', '-12'],
    ['-6 + -4 + -1', '-11'],
    ['-7 + (9 - 13)', '-11'],
    ['2 - (9 + -7)', '0'],
    ['-3 + (13 + -25)', '-15'],
    ['7 - 5 + -10', '-8'],
    ['-7 + -5 + -10', '-22'],
    ['-25 - (34 + -18)', '-41'],
    ['17 - (45 + -28)', '0'],
    ['35 - (12 + 43)', '-20'],
    ['12 - (-3 + 7)', '8'],
    ['2 - -1', '3'],
    ['-2 - -1', '-1'],
    ['-7 - -20', '13'],
    ['26 - -21', '47'],
    ['-19 - -19', '0'],
    ['0 - -317', '317'],
    ['-7 - -8', '1'],
    ['-7 + -8', '-15'],
    ['-1 + -5', '-6'],
    ['1 - -5', '6'],
    ['-12 + -24', '-36'],
    ['-6 - (-33 + 3)', '24'],
    ['16 + -43 - 3', '-30'],
    ['-23 - (0 + -7)', '-16'],
    ['0 - -23 - 11', '12'],
    ['-7 + -7', '-14'],
    ['-7 - -7', '0'],
    ['7 + -7', '0'],
    ['-5 - -22', '17'],
    ['-59 + -73', '-132'],
    ['-54 + -54 - 54', '-162'],
    ['-8 - (5 - 17)', '4'],
    ['-13 - (-5 - 8)', '0'],
    ['18 - (-7 - -11) + 3', '17']
])('can do arithmetic', (input: string, output: string) => {
    const result = casper().go(input)
    expect(result.result).toBe(output)
})

it.each([
    ['(9 + 6) * 5', '75'],
    ['9 * 6 + 5', '59'],
    ['9 * (6 + 5)', '99'],
    ['8 + 3 * 7 + 2', '31'],
    ['8 + 3 * (7 + 2)', '35'],
    ['(8 + 3) * (7 + 2)', '99'],
    ['20 - 2 * (8 - 4)', '12'],
    ['20 - 2 * 8 + 4', '8'],
    ['(20 - 2) * 8 + 4', '148'],
    ['38 - (3 + 2) * 5', '13'],
    ['(38 - 3) + 2 * 5', '45'],
    ['(38 - (3 + 2)) * 5', '165'],
    ['8 + 7 * 6 - 3', '47'],
    ['32 - (25 - 17) / 4', '30'],
    ['32 - (300 - 50 * 2) + 450', '282'],
    ['420 / 4 - (125 - 117) * 4 + 48 / 12 - 4', '73'],
    ['48 / (8 - 4) * 4 + 48 / (12 - 4)', '54'],
    ['(9 * 6 - 18 - 8 * 3) / 6 + 5 * 3', '17'],
    ['(9 * 6 - (18 - 8) * 3) / 6 + 5 * 3', '19']
])('respects the order of operations', (input: string, output: string) => {
    const result = casper().go(input)
    expect(result.result).toBe(output)
})

it.each([
    ['15 / 25', '3 / 5'],
    ['15 / 27', '5 / 9'],
    ['18 / 36', '1 / 2'],
    ['28 / 35', '4 / 5'],
    ['20 / 100', '1 / 5'],
    ['56 / 40', '7 / 5'],
    ['35 / 90', '7 / 18'],
    ['60 / 12', '5'],
    ['32 / 32', '1'],
    ['24 / 42', '4 / 7'],
    ['27 / 15', '9 / 5'],
    ['32 / 12', '8 / 3'],
    ['1 / 2 + 1 / 3', '5 / 6'],
    ['1 / 2 + 1 / 4', '3 / 4'],
    ['3 / 4 - 1 / 3', '5 / 12'],
    ['(1 + 1 / 2) - 1 / 4', '5 / 4'],
    ['(2 + 1 / 3) + (1 + 1 / 4)', '43 / 12'],
    ['3 / 10 - 1 / 5', '1 / 10'],
    ['4 - (1 + 2 / 3)', '7 / 3'],
    ['(5 + 3 / 10) + (1 + 1 / 4)', '131 / 20'],
    ['(5 + 3 / 4) - (1 + 1 / 12)', '14 / 3'],
    ['3 / 7 + 5 / 8', '59 / 56'],
    ['(1 + 5 / 8) - 5 / 12', '29 / 24'],
    ['7 / 8 - 8 / 64', '3 / 4'],
    ['3 / 5 + 2 / 3 + 1 / 6', '43 / 30'],
    ['(2 + 1 / 5) - 3 / 4 + 7 / 10', '43 / 20'],
    ['(3 + 2 / 5) - (3 / 10 + (1 + 1 / 4))', '37 / 20'],
    ['(5 / 8) * (3 / 7)', '15 / 56'],
    ['(1 / 4) * (5 / 6)', '5 / 24'],
    ['(2 / 9) * (1 + 2 / 5)', '14 / 45'],
    ['(1 + 1 / 3) * (1 + 2 / 5)', '28 / 15'],
    ['3 * (2 / 9)', '2 / 3'],
    ['(1 + 1 / 4) * (1 + 2 / 5)', '7 / 4'],
    ['(1 / 5) * 15', '3'],
    ['(3 / 5) * 15', '9'],
    ['(2 / 3) * 45', '30'],
    ['(3 / 4) * 80', '60'],
    ['(9 / 10) * 2000', '1800'],
    ['(1 / 4) * 10', '5 / 2'],
    ['(3 / 8) * (2 / 7)', '3 / 28'],
    ['3 / 8 + 2 / 7', '37 / 56'],
    ['(3 / 10) * (1 / 5)', '3 / 50'],
    ['3 / 10 + 1 / 5', '1 / 2'],
    ['(1 + 3 / 4) * (2 / 5)', '7 / 10'],
    ['(1 + 3 / 4) + 2 / 5', '43 / 20'],
    ['(2 + 1 / 4) * (2 + 2 / 5)', '27 / 5'],
    ['(2 + 1 / 4) + (2 + 2 / 5)', '93 / 20'],
    ['1 / 2 + (3 / 4) * (3 / 5)', '19 / 20'],
    ['1 / 4 + (1 + 3 / 4) * (3 / 7)', '1'],
    ['(1 - 1 / 3) * (1 + 1 / 2)', '1'],
    ['(1 + 3 / 5) - (1 / 2) * (1 / 5)', '3 / 2'],
    ['(1 + 2 / 3) + (3 / 4) * (3 / 5)', '127 / 60'],
    ['(2 + 2 / 3) + (1 + 1 / 2) * (5 / 9)', '7 / 2'],
    ['((2 + 1 / 4) - 1 / 3) * (12 / 23)', '1'],
    ['5 - (3 / 8) * (1 + 1 / 3)', '9 / 2'],
    ['4 + (1 / 3) * (3 / 4)', '17 / 4'],
    ['4 * (1 / 3) * (3 / 4)', '1'],
    ['(1 + 1 / 5) * 6000', '7200'],
    ['(1 + 5 / 7) * (7 / 10) - (1 / 5)', '1'],
    ['200 * (2 + 1 / 2)', '500'],
    ['(4 + 1 / 2) + -6', '-3 / 2'],
    ['-(5 + 1 / 4) + -(2 + 3 / 4)', '-8'],
    ['-2 / 3 - (3 + 1 / 3)', '-4'],
    ['(17 + 1 / 4) - ((45 + 1 / 2) + -28)', '-1 / 4'],
    ['(13 + 1 / 2) - ((10 + 3 / 4) + (5 + 1 / 4))', '-5 / 2'],
    ['-(2 + 2 / 5) - ((1 + 3 / 5) - (4 / 5 - 1 / 5))', '-17 / 5'],
    ['-(6 + 1 / 3) + -(2 + 2 / 3)', '-9'],
    ['(3 + 1 / 4) + -(7 + 1 / 2)', '-17 / 4'],
    ['-(5 + 1 / 4) + -(7 + 1 / 2)', '-51 / 4'],
    ['-(2 + 1 / 2) + -(1 + 1 / 4) + 1 / 2', '-13 / 4'],
    ['2 / 3 - (-(2 + 1 / 3) + -1 / 3)', '10 / 3'],
    ['-(8 + 1 / 4) - ((3 + 3 / 4) - (8 + 1 / 2))', '-7 / 2']
])('can do arithmetic with fractions', (input: string, output: string) => {
    const result = casper().go(input)
    expect(result.result).toBe(output)
})
